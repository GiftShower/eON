;; This document describes eON's syntax, using the ABNF format (defined in
;; RFC 5234 -- https://www.ietf.org/rfc/rfc5234.txt).
;; 
;; All valid eON documents will match this description, however certain
;; invalid documents would need to be rejected as per the semantics described
;; in the supporting text description.

;; It is possible to try this grammar interactively, using instaparse.
;;     http://instaparse.mojombo.com/
;; 
;; To do so, in the lower right, click on Options and change `:input-format` to
;; ':abnf'. Then paste this entire ABNF document into the grammar entry box
;; (above the options). Then you can type or paste a sample eON document into
;; the beige box on the left.

;; Overall Structure

eon = [ reservoir ws ] ( object / array )

member = key key-separator value
jsonlike = string key-separator ( string / number / object / array / true / false / null )


object = open-object [ member *( value-separator member ) ] close-object
array = open-array [ value *( value-separator value ) ] close-array
reservoir = open-reservoir [ jsonlike *( value-separator jsonlike ) ] close-reservoir

;; Object
open-object = ws %x7B ws ; { left curly bracket
close-object = ws %x7D ws ; } right curly bracket

;; Array
open-array = ws %x5B ws ; [ left square bracket
close-array = ws %x5D ws ; ] right square bracket

;; Reservoir
open-reservoir = ws %x3C ws ; < less-than sign
close-reservoir = ws %x3E ws ; > greater-than sign


;; Whitespace
ws = *( wschar / newline )
wschar = %x20              ; Space
wschar =/ %x09              ; Horizontal tab
   
newline = %x0A               ; Line feed or New line
newline =/ %x0D              ; Carriage return

;; Separator
key-separator = ws %x3A ws ; : colon
value-separator = ws %x2C ws ; , comma

;; Referencing
refdef-kfv = [ refer-priority ] kfv string kfv ; key from value
refdef-vfk = [ refer-priority ] vfp string vfp ; value from key

kfv = %x7C ; | reference key from value
vfp = %x7C.7C ; || reference value from key

define-urf = %x21.3E.3E ; !>> set as unreferenceable

refer-priority = %x72 int ; referencing priority. shape like r1, r2 etc...

;; Shaping
kelement = ( string / refdef-kfv / refdef-vfk / int )
key =  [ define-urf ] ( kelement [ *( [ ws ] plus [ ws ] kelement ) ] )

velement = false / null / true / object / array / number
vlappend = int / string / refdef-kfv / refdef-vfk
;; vlappend is appending in value. referencing should only return int or string!


value = [ define-urf ] ( velement / vlappend [ *( [ ws ] plus [ ws ] vlappend ) ] )

;; Types
string = quotation-mark *char quotation-mark
number = [ minus ] int [ frac ] [ exp ]
char = unescaped /
     escape (
      %x22 /          ; "    quotation mark  U+0022
      %x5C /          ; \    reverse solidus U+005C
      %x2F /          ; /    solidus         U+002F
	  %x62 /          ; b    backspace       U+0008
	  %x66 /          ; f    form feed       U+000C
	  %x6E /          ; n    line feed       U+000A
	  %x72 /          ; r    carriage return U+000D
	  %x74 /          ; t    tab             U+0009
	  %x75 4HEXDIG )  ; uXXXX                U+XXXX
	  
decimal-point = %x2E       ; .
digit1-9 = %x31-39         ; 1-9
e = %x65 / %x45            ; e E
exp = e [ minus / plus ] 1*DIGIT
frac = decimal-point 1*DIGIT
int = zero / ( digit1-9 *DIGIT )
zero = %x30                ; 0

escape = %x5C              ; \
quotation-mark = %x22      ; "
unescaped = %x20-21 / %x23-5B / %x5D-10FFFF

;; Operator
minus = %x2D    ; -
plus = %x2B     ; +
null  = %x6e.75.6c.6c      ; null
true  = %x74.72.75.65      ; true
false = %x66.61.6c.73.65   ; false

;; Else
HEXDIG = DIGIT / %x41-46 / %x61-66   ; 0-9, A-F, or a-f
	; HEXDIG equivalent to HEXDIG rule in [RFC5234]
DIGIT = %x30-39            ; 0-9
 	; DIGIT equivalent to DIGIT rule in [RFC5234]
