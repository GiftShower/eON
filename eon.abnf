;; This document describes eON's syntax, using the ABNF format (defined in
;; RFC 5234 -- https://www.ietf.org/rfc/rfc5234.txt).
;;
;; All valid eON documents will match this description, however certain
;; invalid documents would need to be rejected as per the semantics described
;; in the supporting text description.

;; It is possible to try this grammar interactively, using instaparse.
;;     http://instaparse.mojombo.com/
;;
;; To do so, in the lower right, click on Options and change `:input-format` to
;; ':abnf'. Then paste this entire ABNF document into the grammar entry box
;; (above the options). Then you can type or paste a sample eON document into
;; the beige box on the left.

;; Document Rule
;;
;; NOTICE!
;; This can be defined before starting any eON text
;; After opening any kind of brackets, this will be ignored and might cause
;; error while reading or parsing.

eON-docrule = %x40.40 rules
rules = ref-Priority / nb-reservoir

ref-priority = \x72.65.66.50.72.69.6f.72.69.74.79 ; refPriority
;; This is used when multiple referencing from one key/value occures.
;; If that happens without referencing priority, parser will read them in order as they
;; are defined.

nb-reservoir = \x6e.6f.42.6c.61.6e.6b.52.65.73 ; noBlankRes
;; This is used to prevent reservoirs having nothing in them.
;; If this is defined, having blank reservoirs will cause error.

;; Overall Structure

eON-text = object / array / reservoir

;; Object
open-object = ws %x7B ws ; { left curly bracket
close-object = ws %x7D ws ; } right curly bracket

;; Array
open-array = ws %x5B ws ; [ left square bracket
close-array = ws %x5D ws ; ] right square bracket

;; reservoir
open-reservoir = ws %x3C ws ; < less-than sign
close-reservoir = ws %x3E ws ; > greater-than sign

;; Whitespace
ws = *(
     %x20 /              ; Space
     %x09 /              ; Horizontal tab
     %x0A /              ; Line feed or New line
     %x0D                ; Carriage return
     )

;; Separator
key-separator = ws %x3A ws ; : colon
value-separator = ws %x2C ws ; , comma

;; Referencing
refdef-kfv = [ refer-priority ] kfv string kfv ; kfv define
refdef-vfk = [ refer-priority ] vfp string vfp ; vfk define
unrefdef = define-urf string kfv ; !|element| unreferenceable

kfv = %x7c ; | reference key from value
vfp = %x7c.7c ; || reference value from key
define-urf = %x21.7c ws ; !| set as unreferenceable

refer-priority = %x72 int ; referencing priority. shape like r1, r2 etc...

;; Shaping
kelement = ( string / refdef-kfv / refdef-vfk )
key = kelement [ *( [ ws ] plus [ ws ] kelement ) ]
velement = false / null / true / object / array
vlappend =  number / string / refdef-kfv / refdef-vfk ;; appendable value



;; Types
string = quotation-mark *char quotation-mark
char = unescaped /
     escape (
          %x22 /          ; "    quotation mark  U+0022
          %x5C /          ; \    reverse solidus U+005C
          %x2F /          ; /    solidus         U+002F
	  %x62 /          ; b    backspace       U+0008
	  %x66 /          ; f    form feed       U+000C
	  %x6E /          ; n    line feed       U+000A
	  %x72 /          ; r    carriage return U+000D
	  %x74 /          ; t    tab             U+0009
	  %x75 4HEXDIG )  ; uXXXX                U+XXXX
          
escape = %x5C              ; \
quotation-mark = %x22      ; "
unescaped = %x20-21 / %x23-5B / %x5D-10FFFF

;; Operator
minus = %x2D    ; -
plus = %x2B     ; +
